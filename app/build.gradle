plugins {
    id 'com.android.application'
    id 'com.github.breadmoirai.github-release' version '2.2.12'
    id 'org.ajoberstar.grgit'
}

import org.ajoberstar.grgit.Grgit

def appName = "BluetoothPlusPlus"

ext {
    grgit = Grgit.open(currentDir: projectDir)
    projectVersionCode = grgit.log().size()
    projectVersionName = "${project.version}"
}

android {
    compileSdkVersion 30

    signingConfigs {
        debug {
            storeFile file("${project.rootDir}/bluetoothplusplus")
            storePassword 'bluetoothplusplus'
            keyPassword 'bluetoothplusplus'
            keyAlias 'bpp'
        }
        release {
            storeFile file("${project.rootDir}/bluetoothplusplus")
            storePassword "bluetoothplusplus"
            keyAlias "bpp"
            keyPassword "bluetoothplusplus"

            // Optional, specify signing versions used
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    defaultConfig {
        applicationId "com.github.teamjcd.bpp"
        minSdkVersion 27
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 27
        versionCode projectVersionCode
        versionName projectVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        checkReleaseBuilds false
        disable 'MissingTranslation'
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${appName}.apk"
        }
    }
}

githubRelease {
    token getProperty('github.token')
    owner "TeamJCD"
    repo appName
    tagName projectVersionName
    releaseName "Bluetooth++ ${projectVersionName}"
    releaseAssets "${project.buildDir}/distributions/${appName}-${android.defaultConfig.versionName}.zip"
}

tasks.findByName('githubRelease').dependsOn('packageMagiskModule')

dependencies {
    implementation 'androidx.annotation:annotation-experimental:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.preference:preference:1.1.1'

    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'

    implementation 'com.github.phearme:bt-scan-selector:1.1.9'

    compileOnly fileTree(dir: 'libs', include: ['*.aar', '*.jar'], exclude: [])

    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

import org.apache.tools.ant.filters.ReplaceTokens

task copyMagiskFiles(type: Copy) {
    from file("src/magisk")
    include "**/*"
    include "*"
    exclude "**/.keep"
    into file("${project.buildDir}/outputs/magisk")
    filter(ReplaceTokens, tokens: [
            version    : "${android.defaultConfig.versionName}".toString(),
            versionCode: "${android.defaultConfig.versionCode}".toString(),
            appId      : "${appName}".toString(),
            appName    : "${appName}".toString(),
    ])
}

copyMagiskFiles.dependsOn("assembleRelease")

task copyApk(type: Copy) {
    from file("${project.buildDir}/outputs/apk/release")
    include "${appName}.apk"
    into file("${project.buildDir}/outputs/magisk/system/priv-app/${appName}")
}

copyApk.dependsOn("copyMagiskFiles")

task packageMagiskModule(type: Zip) {
    from("${project.buildDir}/outputs/magisk") {
        include "*"
        include "**/*"
    }
    archiveBaseName = "${appName}"
    archiveVersion = "${android.defaultConfig.versionName}"
}

packageMagiskModule.dependsOn("copyApk")

task pushMagiskZip(type: Exec) {
    def pushCommand = [
            'adb', 'push',
            "${project.buildDir}/distributions/${appName}-${android.defaultConfig.versionName}.zip",
            "/sdcard/Download/"
    ]
    commandLine pushCommand
}

pushMagiskZip.dependsOn("packageMagiskModule")

task printVersion() {
    doLast {
        println("Version Name: $projectVersionName")
        println("Version Code: $projectVersionCode")
    }
}
